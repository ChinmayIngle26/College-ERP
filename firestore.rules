rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    function isAdmin() {
      return isAuth() && getUserData(request.auth.uid).role == 'admin';
    }
    function isFaculty() {
        return isAuth() && (getUserData(request.auth.uid).role == 'faculty' || isAdmin());
    }
    function isStudent(userId) {
      // Check if user is authenticated and is the student in question
      return isUser(userId);
    }
    
    // Simplified student check for classroom membership.
    function isEnrolledStudent(classroomId) {
        return isAuth() && get(/databases/$(database)/documents/classrooms/$(classroomId)).data.studentUids.hasAny([request.auth.uid]);
    }
    
    function isFacultyForClassroom(classroomId) {
        let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
        return isFaculty() && (request.auth.uid == classroom.ownerFacultyId || request.auth.uid in classroom.invitedFacultyIds);
    }


    // Users Collection:
    // - Authenticated users can read their own data.
    // - Admins can read/write/delete any user document.
    // - Anyone can perform a 'list' (query) to check for studentId uniqueness during signup.
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow list: if true; // Allows querying for unique student ID check
      allow create: if isAuth(); // A user can be created via signup
      allow update: if isUser(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Classrooms Collection:
    // - Faculty can create classrooms.
    // - Faculty can read/update/delete classrooms they own or are invited to.
    // - Students can read classrooms they are enrolled in.
    match /classrooms/{classroomId} {
      allow create: if isFaculty();
      allow read: if isFacultyForClassroom(classroomId) || isEnrolledStudent(classroomId);
      allow update: if isFacultyForClassroom(classroomId);
      allow delete: if isFaculty() && resource.data.ownerFacultyId == request.auth.uid;
      
      // Messages Subcollection:
      // - Faculty or enrolled students can list/read/create messages.
      // - Only the message sender can update/delete their own message.
      match /messages/{messageId} {
        allow read, list, create: if isFacultyForClassroom(classroomId) || isEnrolledStudent(classroomId);
        allow update, delete: if isAuth() && resource.data.senderId == request.auth.uid;
      }
    }

    // Grades Collection:
    // - Faculty can create/update/delete grades.
    // - Students can read their own grades.
    match /grades/{gradeId} {
        allow read: if isAuth() && (isFaculty() || resource.data.studentId == request.auth.uid);
        allow list: if isFaculty();
        allow create, update, delete: if isFaculty();
    }
    
    // Profile Change Requests Collection:
    // - Students can create requests.
    // - Admins can read, update, and delete requests.
    match /profileChangeRequests/{requestId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow read, list, update, delete: if isAdmin();
    }
    
    // Lecture Attendance Collection:
    // - Faculty can create/update/delete records.
    // - Students can read their own records.
    match /lectureAttendance/{attendanceId} {
        allow read: if isAuth() && (isFaculty() || resource.data.studentId == request.auth.uid);
        allow list: if isFaculty();
        allow create, update, delete: if isFaculty();
    }
    
    // systemSettings: Admins can write, anyone can read.
    match /systemSettings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
