
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isFaculty() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    function isStudent() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isFacultyOfClassroom(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return isFaculty() && 
             (classroom.ownerFacultyId == request.auth.uid || request.auth.uid in classroom.invitedFacultyIds);
    }
    
    function isStudentOfClassroom(classroomId) {
      return isStudent() && request.auth.uid in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.studentUids;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can query the users collection for the studentId uniqueness check on signup
      // IMPORTANT: This rule only allows querying, not listing all users.
      // The query from the client MUST include a `where('studentId', '==', ...)` clause.
      allow read: if isAuthenticated() && request.auth.uid == userId;
                 
      // Allow users to update their own profile, but not change their role
      allow update: if isAuthenticated() && request.auth.uid == userId
                    && request.resource.data.role == resource.data.role;
      
      // Admins can create, read, update, and delete any user profile
      allow create, delete: if isAdmin();
      allow read, update: if isAdmin();
    }
    
    // Rules for the 'classrooms' collection
    match /classrooms/{classroomId} {
      // Create: Only authenticated faculty can create classrooms
      allow create: if isFaculty();
      
      // Read: Admins, the owner/invited faculty, and enrolled students can read
      allow read: if isAdmin() || isFacultyOfClassroom(classroomId) || isStudentOfClassroom(classroomId);
      
      // Update: Only the owner/invited faculty or admins can update
      allow update: if isAdmin() || isFacultyOfClassroom(classroomId);
      
      // Delete: Only the owner or an admin can delete
      allow delete: if isAdmin() || (isFaculty() && resource.data.ownerFacultyId == request.auth.uid);

      // Rules for the 'messages' subcollection within a classroom
      match /messages/{messageId} {
        // Read: Only members of the classroom (faculty or student) or admins can read messages
        allow read: if isAdmin() || isFacultyOfClassroom(classroomId) || isStudentOfClassroom(classroomId);

        // Create: Only members of the classroom can send messages
        allow create: if (isFacultyOfClassroom(classroomId) || isStudentOfClassroom(classroomId)) && request.resource.data.senderId == request.auth.uid;
      }
    }
    
    // Rules for the 'grades' collection
    match /grades/{gradeId} {
      // Create, Update: Only faculty or admins can create/update grades
      allow create, update: if isAdmin() || isFaculty();
      
      // Read: Admins, faculty, and the student to whom the grade belongs can read
      allow read: if isAdmin() || isFaculty() || (isStudent() && resource.data.studentId == request.auth.uid);
      
      // Delete: Only faculty or admins can delete
      allow delete: if isAdmin() || isFaculty();
    }
    
    // Rules for 'lectureAttendance' collection
    match /lectureAttendance/{attendanceId} {
      // Create, Update: Only faculty or admins can manage attendance
      allow create, update: if isAdmin() || isFaculty();
      
      // Read: Admins, faculty, and the specific student can read their own attendance
      allow read: if isAdmin() || isFaculty() || (isStudent() && resource.data.studentId == request.auth.uid);
      
      // Delete: Attendance records are generally not deleted, but if so, only by admin/faculty
      allow delete: if isAdmin() || isFaculty();
    }
    
    // Rules for 'profileChangeRequests' collection
    match /profileChangeRequests/{requestId} {
       // Create: Authenticated users can create requests for themselves
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Read: Admins can read all requests. Users can read their own.
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // Update: Only admins can update the status (approve/deny)
      allow update: if isAdmin();
      
      // Delete: Generally not allowed, but if needed, only by an admin.
      allow delete: if isAdmin();
    }

    // Rules for the 'systemSettings' collection
    match /systemSettings/{docId} {
        // Read: All authenticated users can read system settings (like maintenance mode, app name)
        allow read: if isAuthenticated();

        // Write: Only admins can change system settings
        allow write: if isAdmin();
    }
  }
}
