
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions for roles
    function isStudent(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && get(/databases/$(database)/documents/users/$(userId)).data.role == 'student';
    }
    
    function isFaculty(userId, ownerId, invitedIds) {
      return exists(/databases/$(database)/documents/users/$(userId)) && get(/databases/$(database)/documents/users/$(userId)).data.role == 'faculty' && (userId == ownerId || userId in invitedIds);
    }
    
    function isAdmin(userId) {
      // Check for hardcoded admin email or 'admin' role in their user document
      let userDoc = get(/databases/$(database)/documents/users/$(userId)).data;
      return request.auth.token.email == 'admin@gmail.com' || (exists(/databases/$(database)/documents/users/$(userId)) && userDoc.role == 'admin');
    }
    
    // --- USERS Collection ---
    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read their own profile data. This is crucial for the app to function.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow admins to read any user profile
      allow read: if request.auth != null && isAdmin(request.auth.uid);

      // Allow authenticated users to create their own user document during signup.
      // We check that the document ID matches their UID and they are setting their role to 'student'.
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.role == 'student';
      
      // Allow users to update their own profile, but prevent them from changing their role or email.
      allow update: if request.auth != null && request.auth.uid == userId && request.resource.data.role == resource.data.role && request.resource.data.email == resource.data.email;
      
      // Allow admins to perform any action on any user document
      allow write: if request.auth != null && isAdmin(request.auth.uid);
      
      // Explicitly deny delete for non-admins to prevent accidental deletion. Admins can delete via the rule above.
      allow delete: if false;
    }

    // --- CLASSROOMS Collection ---
    // Rules for the 'classrooms' collection
    match /classrooms/{classroomId} {
      // Allow faculty to create classrooms
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
      
      // Allow faculty (owner or invited) and enrolled students to read classroom data
      allow read: if isFaculty(request.auth.uid, resource.data.ownerFacultyId, resource.data.invitedFacultyIds)
                    || (isStudent(request.auth.uid) && request.auth.uid in resource.data.studentUids);

      // Allow only the owner faculty to update the classroom details (name, subject, inviting other faculty)
      allow update: if isFaculty(request.auth.uid, resource.data.ownerFacultyId, resource.data.invitedFacultyIds);
      
      // Allow only the owner faculty to delete the classroom
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerFacultyId;

      // --- CHAT MESSAGES Subcollection ---
      // Rules for the 'messages' subcollection within a classroom
      match /messages/{messageId} {
        // Deny listing all messages directly; access should be through queries.
        allow list: if false;
        
        // Allow enrolled students and authorized faculty to read messages
        allow read: if isFaculty(request.auth.uid, get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerFacultyId, get(/databases/$(database)/documents/classrooms/$(classroomId)).data.invitedFacultyIds)
                      || (isStudent(request.auth.uid) && request.auth.uid in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.studentUids);

        // Allow enrolled students and authorized faculty to create messages
        allow create: if (isStudent(request.auth.uid) || isFaculty(request.auth.uid, get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerFacultyId, get(/databases/$(database)/documents/classrooms/$(classroomId)).data.invitedFacultyIds))
                      && request.auth.uid in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.studentUids;
      }
    }
    
    // --- GRADES Collection ---
    // Rules for the 'grades' collection
    match /grades/{gradeId} {
      // Allow students to read grades that belong to them
      allow read: if request.auth != null && resource.data.studentId == request.auth.uid;
      
      // Allow faculty to write/update/delete grades
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    // --- LECTURE ATTENDANCE Collection ---
    match /lectureAttendance/{attendanceId} {
      // Students can read their own attendance records
      allow read: if request.auth != null && resource.data.studentId == request.auth.uid;
      
      // Faculty can write attendance records
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    // --- PROFILE CHANGE REQUESTS Collection ---
    match /profileChangeRequests/{requestId} {
       // Students can create requests for themselves
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Students can view their own requests
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Admins can read, update (approve/deny), and delete any request
      allow write, read, list: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // --- SYSTEM SETTINGS Collection ---
    match /systemSettings/{docId} {
      // Allow anyone (including unauthenticated users for maintenance page) to read settings
      allow read: if true;
      
      // Only allow admins to write/update settings
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
  }
}
