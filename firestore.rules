rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }

    function isFaculty() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'faculty';
    }
    
    // Function to check if the user is the owner or an invited faculty for a specific classroom
    function isClassroomManager(classroomId) {
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return isAuthenticated() && (
        classroomDoc.ownerFacultyId == request.auth.uid ||
        (classroomDoc.keys().hasAny(['invitedFacultyIds']) && classroomDoc.invitedFacultyIds.hasAny([request.auth.uid]))
      );
    }

    // Simplified check: user is authenticated and the classroom has students.
    // For more granular student-specific read/write on messages, consider denormalizing student UIDs to a list in the classroom doc.
    function isEnrolledStudentOrFaculty(classroomId) {
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      let isStudentInClassroom = isAuthenticated() && 
                                classroomData.keys().hasAny(['students']) && 
                                classroomData.students.size() > 0; // Basic check, not specific student
      return isClassroomManager(classroomId) || isStudentInClassroom;
    }

    // Matches any document in the 'users' collection.
    match /users/{userId} {
      // Allow user to read their own profile
      allow get: if isOwner(userId) || isAdmin() || isFaculty(); // Faculty might need to see basic info for students in their class.

      // Allow user to create their own profile (e.g., during signup)
      // Student ID, name, email, major, parentEmail can be set. Role defaults to 'student'.
      allow create: if isOwner(userId) && 
                      request.resource.data.role == 'student' &&
                      request.resource.data.keys().hasAll(['name', 'studentId', 'major', 'email', 'parentEmail', 'role']);
      
      // Allow user to update specific fields of their own profile
      // More sensitive fields (like email, role) should be handled by admin or specific backend processes.
      allow update: if (isOwner(userId) && 
                        !request.resource.data.keys().hasAny(['email', 'role', 'studentId'])) || 
                       isAdmin(); // Admins can update any field.

      // Admins can list users (for user management panel)
      allow list: if isAdmin();
      // Admins can delete users (Firestore document only, Auth user separate)
      allow delete: if isAdmin();
    }

    match /classrooms/{classroomId} {
      allow get: if isAuthenticated(); // Any authenticated user can get classroom details to check enrollment.
      allow list: if isFaculty(); // Faculty can list classrooms they might own or be invited to.
      
      allow create: if isFaculty() && 
                      request.resource.data.ownerFacultyId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['name', 'subject', 'ownerFacultyId', 'invitedFacultyIds', 'students']) &&
                      request.resource.data.invitedFacultyIds is list &&
                      request.resource.data.students is list;

      // Only owner or invited faculty can update classroom details (name, subject) or manage students/faculty.
      allow update: if isClassroomManager(classroomId) &&
                      // Ensure only allowed fields are updated by faculty, createdAt should be immutable
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'subject', 'invitedFacultyIds', 'students']) &&
                      request.resource.data.createdAt == resource.data.createdAt;
                      
      allow delete: if isFaculty() && resource.data.ownerFacultyId == request.auth.uid; // Only owner can delete

      // Messages subcollection
      match /messages/{messageId} {
        allow read, list: if isEnrolledStudentOrFaculty(classroomId);
        allow create: if isEnrolledStudentOrFaculty(classroomId) && 
                        request.resource.data.senderId == request.auth.uid &&
                        request.resource.data.keys().hasAll(['classroomId', 'senderId', 'senderName', 'text', 'timestamp']) &&
                        request.resource.data.classroomId == classroomId; 
        // No updates or deletes for messages by default for simplicity
        allow update, delete: if false;
      }
    }
    
    match /profileChangeRequests/{requestId} {
        allow get: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
        allow list: if isAdmin(); // Only admins can list all requests.
        allow create: if isAuthenticated() && 
                        request.resource.data.userId == request.auth.uid &&
                        request.resource.data.status == 'pending' &&
                        request.resource.data.keys().hasAll(['userId', 'userName', 'userEmail', 'fieldName', 'oldValue', 'newValue', 'requestedAt', 'status']);
        allow update: if isAdmin() && 
                        // Admins can update status, adminNotes, resolvedAt.
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'adminNotes', 'resolvedAt']) &&
                        // Ensure some fields remain unchanged by admin during this update
                        request.resource.data.userId == resource.data.userId &&
                        request.resource.data.fieldName == resource.data.fieldName &&
                        request.resource.data.oldValue == resource.data.oldValue &&
                        request.resource.data.newValue == resource.data.newValue;
        allow delete: if false; // Generally, don't allow deletion of requests to maintain audit trail.
    }

    match /lectureAttendance/{attendanceId} {
        // Faculty can create attendance records for classrooms they manage.
        allow create: if isFaculty() && 
                        isClassroomManager(request.resource.data.classroomId) &&
                        request.resource.data.facultyId == request.auth.uid &&
                        request.resource.data.keys().hasAll(['classroomId', 'classroomName', 'facultyId', 'facultyName', 'date', 'lectureName', 'studentId', 'studentName', 'status', 'submittedAt']);
                        // Batch is optional.

        // Students can read their own attendance records.
        // Faculty can read records they submitted or for classrooms they manage.
        allow get, list: if (isAuthenticated() && resource.data.studentId == request.auth.uid) || 
                            (isFaculty() && (resource.data.facultyId == request.auth.uid || isClassroomManager(resource.data.classroomId)));
        
        allow update, delete: if false; // Attendance records are generally immutable once submitted.
    }

    match /systemSettings/appConfiguration {
      // Public read access is allowed for this specific document
      allow get: if true;
      // Write access is restricted to administrators
      allow create, update, delete, list: if isAdmin();
    }
    // Disallow any other operations on other documents in systemSettings collection by default
    match /systemSettings/{docId} {
        allow read, write: if docId == 'appConfiguration' && isAdmin(); // Admin can manage appConfiguration
    }
  }
}
