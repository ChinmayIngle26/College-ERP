rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isRole('admin');
    }

    // Helper function to check if user is faculty
    function isFaculty() {
      return isRole('faculty');
    }
    
    // Helper function to check if user is the owner of a classroom
    function isClassroomOwner(classroomId) {
        return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerFacultyId == request.auth.uid;
    }

    // Helper function to check if user is an invited faculty for a classroom
    function isInvitedFaculty(classroomId) {
        return request.auth.uid in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.invitedFacultyIds;
    }
    
    // Helper function to check if the user is an enrolled student in a classroom
    function isEnrolledStudent(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return request.auth.uid in classroom.students.map(student => student.userId);
    }

    // --- Rules for 'users' collection ---
    match /users/{userId} {
      // Allow anyone to read for the student ID uniqueness check during signup.
      // This is safe as long as no highly sensitive data is stored here.
      allow read: if true;
      
      // Allow authenticated users to update their OWN profile document.
      allow update: if request.auth != null && request.auth.uid == userId;

      // Allow admins to create, and delete any user profile document.
      allow create, delete: if request.auth != null && isAdmin();
    }
    
    // --- Rules for 'classrooms' collection ---
    match /classrooms/{classroomId} {
      // Allow faculty to create classrooms.
      allow create: if request.auth != null && isFaculty();
      
      // Allow owner, invited faculty, and enrolled students to read a classroom.
      allow read: if request.auth != null && (isClassroomOwner(classroomId) || isInvitedFaculty(classroomId) || isEnrolledStudent(classroomId));
      
      // Allow owner or invited faculty to update a classroom (e.g., add/remove students).
      allow update: if request.auth != null && (isClassroomOwner(classroomId) || isInvitedFaculty(classroomId));
      
      // Only the owner can delete a classroom.
      allow delete: if request.auth != null && isClassroomOwner(classroomId);

      // --- Rules for 'messages' subcollection within classrooms ---
      match /messages/{messageId} {
          // Any authenticated member of the classroom (faculty or student) can read messages.
          allow read: if request.auth != null && (isClassroomOwner(classroomId) || isInvitedFaculty(classroomId) || isEnrolledStudent(classroomId));

          // Any authenticated member of the classroom can send messages.
          // We also check that the senderId in the message matches the authenticated user's UID.
          allow create: if request.auth != null && (isClassroomOwner(classroomId) || isInvitedFaculty(classroomId) || isEnrolledStudent(classroomId))
                          && request.resource.data.senderId == request.auth.uid;
          
          // Nobody can update or delete messages for data integrity.
          allow update, delete: if false;
      }
    }
    
    // --- Rules for 'grades' collection ---
    match /grades/{gradeId} {
        // Students can read their own grades.
        // Faculty can read all grades (useful for analysis, can be restricted further if needed).
        // Admins can read all grades.
        allow read: if request.auth != null && 
                      (resource.data.studentId == request.auth.uid || isFaculty() || isAdmin());
        
        // Only faculty and admins can create, update, or delete grades.
        allow create, update, delete: if request.auth != null && (isFaculty() || isAdmin());
    }

    // --- Rules for 'lectureAttendance' collection ---
    match /lectureAttendance/{attendanceId} {
        // Students can read their own attendance records.
        // Faculty and admins can read all attendance records.
        allow read: if request.auth != null &&
                      (resource.data.studentId == request.auth.uid || isFaculty() || isAdmin());
                      
        // Only faculty and admins can create/update attendance records.
        allow create, update, delete: if request.auth != null && (isFaculty() || isAdmin());
    }
    
    // --- Rules for 'profileChangeRequests' collection ---
    match /profileChangeRequests/{requestId} {
        // Students can create requests and read their own.
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read: if request.auth != null && (isAdmin() || resource.data.userId == request.auth.uid);
        
        // Only admins can update (approve/deny) or delete requests.
        allow update, delete: if request.auth != null && isAdmin();
    }
    
    // --- Rules for 'systemSettings' collection ---
    match /systemSettings/appConfiguration {
        // Anyone can read system settings (for maintenance mode check, app name, etc.).
        allow read: if true;
        // Only admins can update system settings.
        allow write: if request.auth != null && isAdmin();
    }
  }
}
