
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Helper Functions
    // =====================================================================
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isStudent() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function isFaculty() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }
    
    function isAdmin() {
      return isSignedIn() && (
        request.auth.token.email == 'admin@gmail.com' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    function isOwner(classroomId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerFacultyId == request.auth.uid;
    }

    function isInvited(classroomId, facultyId) {
      return facultyId in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.invitedFacultyIds;
    }

    function isEnrolled(classroomId, studentId) {
        return studentId in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.studentUids;
    }

    // =====================================================================
    // Collection: users
    // =====================================================================
    match /users/{userId} {
      // Admins can manage any user profile
      allow read, write, create, delete: if isAdmin();
      
      // Users can read their own profile
      allow get: if isSignedIn() && request.auth.uid == userId;
      
      // Users can update their own profile (for non-sensitive fields)
      // Note: Sensitive fields are handled by profileChangeRequests
      allow update: if isSignedIn() && request.auth.uid == userId;

      // Allow pre-signup check for studentId uniqueness
      allow list: if request.auth == null;
    }

    // =====================================================================
    // Collection: classrooms
    // =====================================================================
    match /classrooms/{classroomId} {
        // Create: Only authenticated faculty can create classrooms
        allow create: if isFaculty();

        // Read: Admins, the owner, invited faculty, and enrolled students can read
        allow get: if isSignedIn() && (isAdmin() || isOwner(classroomId) || isInvited(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
        allow list: if isFaculty();

        // Update: Admins, owner, or invited faculty can update
        allow update: if isFaculty() && (isAdmin() || isOwner(classroomId) || isInvited(classroomId, request.auth.uid));

        // Delete: Only the owner or an admin can delete
        allow delete: if isAdmin() || isOwner(classroomId);

        // --- Subcollection: messages ---
        match /messages/{messageId} {
            // Read: Admins, owner, invited faculty, and enrolled students can read messages
            allow list, get: if isSignedIn() && (isAdmin() || isOwner(classroomId) || isInvited(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
            
            // Create: Owner, invited faculty, and enrolled students can send messages
            allow create: if isSignedIn() && (isOwner(classroomId) || isInvited(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));

            // Update/Delete: Only the message sender or an admin can delete/edit their message
            allow update, delete: if isSignedIn() && (isAdmin() || resource.data.senderId == request.auth.uid);
        }
    }

    // =====================================================================
    // Collection: profileChangeRequests
    // =====================================================================
    match /profileChangeRequests/{requestId} {
        // Create: Any signed-in user can create a request for themselves
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

        // Read: Admins can read all requests. Users can read their own.
        allow list, get: if isAdmin() || (isSignedIn() && get(/databases/$(database)/documents/profileChangeRequests/$(requestId)).data.userId == request.auth.uid);
        
        // Update: Only admins can update (approve/deny) a request
        allow update: if isAdmin();

        // Delete: Nobody can delete requests to maintain a history log.
        allow delete: if false;
    }

    // =====================================================================
    // Collection: grades
    // =====================================================================
    match /grades/{gradeId} {
        // Create/Update: Faculty and admins can create/update grades
        allow create, update: if isFaculty() || isAdmin();

        // Read: Admins and faculty can read all grades. Students can only read their own.
        allow list, get: if isAdmin() || isFaculty() || (isStudent() && get(/databases/$(database)/documents/grades/$(gradeId)).data.studentId == request.auth.uid);
        
        // Delete: Faculty and admins can delete grades
        allow delete: if isFaculty() || isAdmin();
    }

    // =====================================================================
    // Collection: lectureAttendance
    // =====================================================================
    match /lectureAttendance/{attendanceId} {
        // Create/Update: Faculty and admins can manage attendance records
        allow create, update, delete: if isFaculty() || isAdmin();

        // Read: Admins/Faculty can read all. Students can read their own.
        allow list, get: if isAdmin() || isFaculty() || (isStudent() && get(/databases/$(database)/documents/lectureAttendance/$(attendanceId)).data.studentId == request.auth.uid);
    }
    
    // =====================================================================
    // Collection: systemSettings
    // =====================================================================
    match /systemSettings/appConfiguration {
      // Read: Anyone can read system settings (e.g., app name, maintenance mode).
      allow get: if true;
      
      // Write: Only admins can change system settings.
      allow write: if isAdmin();
    }
  }
}
